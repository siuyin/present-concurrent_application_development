Concurrent Application Development
with Go functions, channels and contexts
20 Nov 2019

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* Our world is concurrent

* Each person acts independently

- Each process (person) acts independently.
- Process actions based on messages.
- Messages received over channels.
- Messages that may have timing or requests specific contexts.
- Messages that may have functions (directions) to perform actions.

* Real-world organisation, ABC

- We (ABC) deliver packages.
- ABC accept orders.
- Orders have a sender address, destination address, package pickup address and associated contractual terms.

How do we design ABC given that ABC will operate globally?

Orders, packages and destinations can located anywhere on Earth.

* Organisation / Application Design

* Mission Statement / System Context

ABC:

- delivers packages
- based on orders
- to destinations globally.

SysF:

- delivers files
- based on messages
- to accessible network locations.

* Locations / System Deployables

ABC has:

- a web presence to accept orders
- distribution hubs in Asia, US and Europe
- access to a fleet of package delivery vehicles

Hard: Location, location, location.

SysF has:

- a file delivery order event stream
- a set of deployables (initially a monolith but structured to be decomposable to microservices as needed)
- access to a communication network 

Simple: Start with minimum viable set, designed for extensibility and scale.

* Organisation Chart / Module Map

Each of ABC's locations has an organisation chart:

- with named divisions, departments, sections, units
- having clearly defined goals / purposes
- and an initial reporting structure that can change over time
- all serving to meet the Locations' mission, which is a sub-set of the whole Organisation's mission 

Each of SysF's deployables has a module map:

- with named module(s)
- having clearly defined functions
- and an initial message graph that can change over time
- all serving to meet the Deployable's function which is a sub-set of the System's function.

* Computer Science

- C4 model for visualising software architecture: Context (Mission Statement), Containers (Location), Components (Org Chart), Code

- Dijkstra's Structured Programming: Top-down decomposition

- Object Oriented Design: Thinking about objects and their interactions (messages)

- Domain Driven Design: Context, Domain (subject area), Model (descriptions of the Domain), Ubiquitous Language (model communications)

- Unix philosophy: do one thing well, everything is a file, favours composability. 

My thesis: Think big-picture, define deployables, build modules with simple composable functions. Entire modules or deployables can be retired if no longer relevant.

* SysF Deployables

SysF will have two deployables (containers in C4 modelling terms):

- A Go binary named sysf.
sysf will be a single binary comprising of modules (organisation departments) that communicate mainly via a message broker (think email) and occasionally via request-response (think telephone calls).

- A message broker: NATS-Streaming.
NATS-Streaming is a persistent event log that guarantees at least once delivery (think writing on a shared white-board).
NATS-Streaming also includes NATS messaging which is fire and forget (think non-registered paper mail).

* sysf Go binary: modules

*order*: Package order has Receive, Validate and Send functions operating on types order.ID and order.Event .

*user*: Package user has types user.ID and user.Event and method Authn .
authner: Interface authner has an Authn method returning a user.ID and error. Authn() (user.ID, error) 

*delv*: Package delv (short for delivery) has types delv.ID and delv.Event and method Copy .
copier: Interface copier has a Copy method returning an error. Copy(src, dest string) error

*web*: Package web provides the web front-end to SysF. It is the main user interface for capturing orders and providing delivery status.

* sysf Go binary: module map

.image sysf_module_map.png 

* Let's start coding

* Create package folders

  mkdir -p order
  mkdir -p user
  mkdir -p delv
  mkdir -p web
  mkdir -p cmd/sysf

* Deploy NATS-Streaming

Get NATS-Streaming:

.link https://nats.io/download

  cd /tmp
  wget https://github.com/nats-io/nats-streaming-server/releases/download/v0.16.2/nats-streaming-server-v0.16.2-linux-amd64.zip
  unzip nats-streaming-server-v0.16.2-linux-amd64.zip
  mv nats-streaming-server ~/go/bin

Open a new terminal session

  ~/go/bin/nats-streaming-server
