Concurrent Application Development
with Go functions, channels and contexts
20 Nov 2019

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* Our world is concurrent

* Each person acts independently

- Each process (person) acts independently.
- Process actions based on messages.
- Messages received over channels.
- Messages that may have timing or requests specific contexts.
- Messages that may have functions (directions) to perform actions.

* Real-world organisation, ABC

- We (ABC) deliver packages.
- ABC accept orders.
- Orders have a sender address, destination address, package pickup address and associated contractual terms.

How do we design ABC given that ABC will operate globally?

Orders, packages and destinations can located anywhere on Earth.

* Organisation / Application Design

* Mission Statement / System Context

ABC:

- delivers packages
- based on orders
- to destinations globally.

SysF:

- delivers files
- based on messages
- to accessible network locations.

* Locations / System Deployables

ABC has:

- a web presence to accept orders
- distribution hubs in Asia, US and Europe
- access to a fleet of package delivery vehicles

Hard: Location, location, location.

SysF has:

- a file delivery order event stream
- a set of deployables (initially a monolith but structured to be decomposable to microservices as needed)
- access to a communication network 

Simple: Start with minimum viable set, designed for extensibility and scale.

* Organisation Chart / Module Map

Each of ABC's locations has an organisation chart:

- with named divisions, departments, sections, units
- having clearly defined goals / purposes
- and an initial reporting structure that can change over time
- all serving to meet the Locations' mission, which is a sub-set of the whole Organisation's mission 

Each of SysF's deployables has a module map:

- with named module(s)
- having clearly defined functions
- and an initial message graph that can change over time
- all serving to meet the Deployable's function which is a sub-set of the System's function.

* Computer Science

- C4 model for visualising software architecture: Context (Mission Statement), Containers (Location), Components (Org Chart), Code

- Dijkstra's Structured Programming: Top-down decomposition

- Object Oriented Design: Thinking about objects and their interactions (messages)

- Domain Driven Design: Context, Domain (subject area), Model (descriptions of the Domain), Ubiquitous Language (model communications)

- Unix philosophy: do one thing well, everything is a file, favours composability. 
